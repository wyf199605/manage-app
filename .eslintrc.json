{
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 6,
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true
    },
    "project": "./tsconfig.json"
  },
  "plugins": ["@typescript-eslint"],
  "env": {
    "commonjs": true,
    "browser": true,
    "es6": true
  },
  "rules": {
    // 缩进检查，4个空格
    "@typescript-eslint/indent": ["error", 4],
    // 驼峰写法检查
    "@typescript-eslint/camelcase": [
      "error",
      {
        "properties":  "always",
        "ignoreDestructuring": true
      }
    ],
    // 接口和类必须大写字母开头的驼峰写法
    "@typescript-eslint/class-name-casing": ["error"],
    // 静止使用 //@ts-igonre 注释
    "@typescript-eslint/ban-ts-ignore": ["error"],
    // 要求函数显示返回类型   关闭
    "@typescript-eslint/explicit-function-return-type": [
      "off",
      {
        "allowExpressions": true,
        "allowTypedFunctionExpressions": true
      }
    ],
    // 添加接口命名前缀，always要求所有接口带有前缀"I"，never不允许所有接口带有前缀"I"
    "@typescript-eslint/interface-name-prefix": ["error", "always"],
    // 禁止使用 <Type> 断言，需使用 as Type 断言
    "@typescript-eslint/no-angle-bracket-type-assertion": ["error"],
    // 禁止使用for in 遍历数组
    "@typescript-eslint/no-for-in-array": ["error"],
    // 添加类成员前缀 private | public | protected。如下private需使用 _ 前缀
    "@typescript-eslint/member-naming": ["error", {"private":  "_"}],
    // 接口interface和类型type定义的成员分隔符样式
    "@typescript-eslint/member-delimiter-style": [
      "error",
      {
        // 多行
        "multiline": {
          "delimiter": "semi", // semi(分号) | none(无) | comma(逗号)
          "requireLast": true
        },
        // 单行
        "singleline": {
          "delimiter": "semi",
          "requireLast": false
        }
      }
    ],
    // 在语句结尾处需要分号
    "@typescript-eslint/semi": [
      "error",
      "always",
      {"omitLastInOneLineBlock": true} // 忽略行块最后一个分号
    ],
    // 不允许awit 不是Promise的值
    "@typescript-eslint/await-thenable": ["warn"],
    // 禁止使用eval
    "no-eval": ["error"],
    // 禁止隐式eval，如：setTimeout("alert(1)", 1000);
    "no-implied-eval": ["error"],
    // 禁止在循环中使用await
    "no-await-in-loop": ["error"],
    // 禁止不必要的分号，如 let a;;
    "no-extra-semi": ["error"],
    // 此规则强制在对象字面量属性中的键和值之间保持一致的间距
    "key-spacing": [
      "error",
      {
        "beforeColon": false, // 不允许在对象文字中的键和冒号之间使用空格
        "afterColon": true, // 需要在冒号和对象文字中的值之间至少有一个空格
        "mode": "strict" // 在对象文字的冒号之前后之后执行一个空格
      }
    ],
    // 箭头函数空格定义
    "arrow-spacing": [
      "error",
      {
        "before": true,
        "after": true
      }
    ]
  }
}
